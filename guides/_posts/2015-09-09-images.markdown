---
layout: post
title: Images
---

# Images

Processing can do more than draw shapes. We can also load images and
draw them at `x`,`y` locations. Actually, you can do a lot more with
images, but we'll start with that.

Read,

- about the [`PImage`](http://processing.org/reference/PImage.html) type
  
- about the
  [`loadImage()`](http://processing.org/reference/loadImage_.html)
  function
  
- about the [`image()`](http://processing.org/reference/image_.html)
  function and [`imageMode()`](http://processing.org/reference/imageMode_.html) (which is like `rectMode()`)

- possibly useful: [`tint()`](http://processing.org/reference/tint_.html) and [`noTint()`](http://processing.org/reference/noTint_.html); [`smooth()`](http://processing.org/reference/smooth_.html) and [`noSmooth()`](http://processing.org/reference/noSmooth_.html)
  
**Note**: your image files must be in a folder called "data" in your
sketch folder.

## Example

<div style="text-align: center; margin: 10px;">
<img src="/images/images-example.png" />
</div>

{% highlight java %}
// background image from:
// http://poster.4teachers.org/imgFileWizard/73251.jpg

// spacheships from:
// http://opengameart.org/content/spaceship-set-32x32px

PImage bg;
PImage boss;
PImage player;
int bossx, bossy;
int px, py;

void setup()
{
  size(800, 600);
  bg = loadImage("moon.jpg");
  boss = loadImage("boss1.png");
  player = loadImage("player_ship.png");
  imageMode(CENTER);
  
  bossx = 400; bossy = 100;
  px = 400; py = 500;
}

void draw()
{
  smooth();
  noTint();
  image(bg, width/2, height/2, 
    width, (float(width)/bg.width)*bg.height);
  
  noSmooth();
  tint(255, 100, 100);
  image(boss, bossx, bossy, 4*boss.width, 4*boss.height);
  tint(113, 100, 255);
  image(player, px, py, 3*player.width, 3*player.height);
}

void keyPressed()
{
  if(key == CODED)
  {
    if(keyCode == UP)
    {
      py -= 5;
    }
    if(keyCode == DOWN)
    {
      py += 5;
    }
    if(keyCode == LEFT)
    {
      px -= 5;
    }
    if(keyCode == RIGHT)
    {
      px += 5;
    }
  }
}
{% endhighlight %}

## Banana fire throwing example

{% highlight java %}
PImage bg;
PImage banana;
PImage fire;
boolean fireActive = false;
int bx = 200;
int by = 200;
float fxDelta;
float fyDelta;
float fxOrig;
float fyOrig;

void setup()
{
  size(800, 537);
  imageMode(CENTER);
  bg = loadImage("meadow.jpg");
  banana = loadImage("dancing-banana.gif");
  fire = loadImage("fire.png");
}

void draw()
{
  background(bg);
  image(banana, bx, by);
  if(fireActive)
  {
    image(fire, fxOrig + fxDelta, fyOrig + fyDelta);
    fyDelta = 0.002*(fxDelta*fxDelta);
    fxDelta += 6;
  }
  if(fxOrig + fxDelta > width || fyOrig + fyDelta > height)
  {
    fireActive = false;
  }
  
  if(keyPressed)
  {
    if(key == ' ' && !fireActive)
    {
      fireActive = true;
      fxOrig = bx+100;
      fyOrig = by-100;
      fxDelta = -100;
      fyDelta = 20;
    }
    if(key == 'w')
    {
      by--;
    }
    if(key == 's')
    {
      by++;
    }
    if(key == 'a')
    {
      bx--;
    }
    if(key == 'd')
    {
      bx++;
    }
  }
}
{% endhighlight %}

{% comment %}
## Sprites

Graphics: [http://opengameart.org/content/platformer-art-deluxe](http://opengameart.org/content/platformer-art-deluxe)

{% highlight java %}

int walkCount = 11;
PImage[] p1walk = new PImage[walkCount];
PImage[] p2walk = new PImage[walkCount];
int p1walkframe = 0;
int p2walkframe = 0;
int p1x = 200;
int p1y = 200;
int p2x = 400;
int p2y = 400;

void setup()
{
  size(displayWidth, displayHeight);
  for(int i = 0; i < walkCount; i++)
  {
    if(i < 9)
    {
      p1walk[i] = loadImage("p1_walk0"+(i+1)+".png");
      p2walk[i] = loadImage("p2_walk0"+(i+1)+".png");
    }
    else
    {
      p1walk[i] = loadImage("p1_walk"+(i+1)+".png");
      p2walk[i] = loadImage("p2_walk"+(i+1)+".png");
    }
  }

  // or, if you have one image and want to extract parts out of it,
  // you can do something like this:
  //
  // PImage master = loadImage("masterimage.png");
  // PImage img1 = master.get(x, y, w, h); // location of a rectangle
  // ...etc.
}

void draw()
{
  background(255);
  if(keyPressed && key == CODED && keyCode == LEFT)
  {
    p1x -= 2;
    p1walkframe = (p1walkframe + 1) % walkCount; 
  }
  if(keyPressed && key == CODED && keyCode == RIGHT)
  {
    p1x += 2;
    p1walkframe = (p1walkframe + 1) % walkCount; 
  }
  if(keyPressed && key == 'a')
  {
    p2x -= 2;
    p2walkframe = (p2walkframe + 1) % walkCount; 
  }
  if(keyPressed && key == 'd')
  {
    p2x += 2;
    p2walkframe = (p2walkframe + 1) % walkCount; 
  }
  
  image(p1walk[p1walkframe], p1x, p1y);
  image(p2walk[p2walkframe], p2x, p2y);
}
{% endhighlight %}

## Tiles

Graphics: [http://opengameart.org/content/platformer-art-deluxe](http://opengameart.org/content/platformer-art-deluxe)

{% highlight java %}
PImage[][] tiles = new PImage[8][8];

void setup()
{
  size(8*70, 8*70);
  for(int i = 0; i < 8; i++)
  {
    tiles[i][7] = loadImage("stoneMid.png");
  }
  tiles[1][3] = loadImage("sandCliffLeft.png");
  tiles[2][3] = loadImage("sandMid.png");
  tiles[3][3] = loadImage("sandCliffRight.png");
  
}

void draw()
{
  background(#71FFFE);
  for(int i = 0; i < 8; i++)
  {
    for(int j = 0; j < 8; j++)
    {
      if(tiles[i][j] != null)
      {
        image(tiles[i][j], i*70, j*70);
      }
    }
  }
}
{% endhighlight %}

{% endcomment %}