---
layout: post
title: Images
---

# Images

Processing can do more than draw shapes. We can also load images and
draw them at `x`,`y` locations. Actually, you can do a lot more with
images, but we'll start with something simple.

Read,

- about the [`PImage`](http://processing.org/reference/PImage.html) type
  
- about the
  [`loadImage()`](http://processing.org/reference/loadImage_.html)
  function
  
- about the [`image()`](http://processing.org/reference/image_.html)
  function and [`imageMode()`](http://processing.org/reference/imageMode_.html) (which is like `rectMode()`)

- possibly useful: [`tint()`](http://processing.org/reference/tint_.html) and [`noTint()`](http://processing.org/reference/noTint_.html); [`smooth()`](http://processing.org/reference/smooth_.html) and [`noSmooth()`](http://processing.org/reference/noSmooth_.html)
  
**Note**: your image files must be in a folder called "data" in your
sketch folder.

## Fish and Diver example

<div style="text-align: center; margin: 10px;">
<img src="/images/fish-and-diver.png" />
</div>

{% highlight java %}

// prepare image variables
PImage bg;
PImage diver;
PImage fish1;
PImage fish2;
PImage bubble;

// fx1, fy1, fx2, fy2 are fish positions
float fx1, fx2, fy1, fy2;
// dfx1, dfx2 are fish horizontal speeds
float dfx1 = -3;
float dfx2 = 3;
// bx1, by1, bx2, by2, bx3, by3 are bubble positions
float bx1, by1, bx2, by2, bx3, by3;
// dx, dy is diver position
float dx = 400;
float dy = 300;

void setup()
{
  // make window size same as background image size
  size(1024,685);
  
  // load images
  bg = loadImage("bg.jpg");
  diver = loadImage("diver.png");
  fish1 = loadImage("fish1.png");
  fish2 = loadImage("fish2.png");
  bubble = loadImage("bubble.png");
  imageMode(CENTER);
  fx1 = 100;
  fx2 = 400;
  fy1 = 300;
  fy2 = 400;
  bx1 = 400;
  by1 = 200;
  bx2 = 390;
  by2 = 175;
  bx3 = 410;
  by3 = 150;
}

void draw()
{
  // draw background
  image(bg, width/2, height/2);
  
  // draw diver
  image(diver, dx, dy, diver.width * 0.25, diver.height * 0.25);
  
  // draw bubbles (somewhat transparent with tint())
  tint(255, 255, 255, 200);
  image(bubble, bx1, by1, bubble.width * 0.005, bubble.height * 0.005);
  image(bubble, bx2, by2, bubble.width * 0.005, bubble.height * 0.005);
  image(bubble, bx3, by3, bubble.width * 0.005, bubble.height * 0.005);
  
  // draw fish
  noTint();
  image(fish1, fx1, fy1, fish1.width * 0.1, fish1.height * 0.1);
  image(fish2, fx2, fy2, fish2.width * 0.1, fish2.height * 0.1);
  
  // move fish1 horizontally
  fx1 += dfx1;
  // if fish1 went off screen, restart at a random y-position and speed
  if(fx1 < -100) {
    fx1 = width+100;
    fy1 = random(100, height-100);
    dfx1 = random(-5, -1);
  }
  
  // move fish2 horizontally
  fx2 += dfx2;
  // if fish2 went off screen, restart at a random y-position and speed
  if(fx2 > width+100) {
    fx2 = -100;
    fy2 = random(100, height-100);
    dfx2 = random(1, 5);
  }
  
  // move bubbles
  bx1 += random(-1, 1);
  by1 -= 0.5;
  bx2 += random(-1, 1);
  by2 -= 0.5;
  bx3 += random(-1, 1);
  by3 -= 0.5;
  
  // when bubbles are too far offscreen, restart bubbles at diver position
  if(by3 < -200) {
    bx1 = dx;
    by1 = dy-100;
    bx2 = dx-10;
    by2 = dy-125;
    bx3 = dx+10;
    by3 = dy-150;
  }
}

// move diver
void keyPressed()
{
  if(key == CODED && keyCode == UP) {
    dy -= 5;
  }
  if(key == CODED && keyCode == DOWN) {
    dy += 5;
  }
  if(key == CODED && keyCode == LEFT) {
    dx -= 5;
  }
  if(key == CODED && keyCode == RIGHT) {
    dx += 5;
  }
}
{% endhighlight %}

## Spaceship example

<div style="text-align: center; margin: 10px;">
<img src="/images/images-example.png" />
</div>

{% highlight java %}
// background image from:
// http://poster.4teachers.org/imgFileWizard/73251.jpg

// spacheships from:
// http://opengameart.org/content/spaceship-set-32x32px

PImage bg;
PImage boss;
PImage player;
int bossx, bossy;
int px, py;

void setup()
{
  size(800, 600);
  bg = loadImage("moon.jpg");
  boss = loadImage("boss1.png");
  player = loadImage("player_ship.png");
  imageMode(CENTER);
  
  bossx = 400; bossy = 100;
  px = 400; py = 500;
}

void draw()
{
  smooth();
  noTint();
  image(bg, width/2, height/2, 
    width, (float(width)/bg.width)*bg.height);
  
  noSmooth();
  tint(255, 100, 100);
  image(boss, bossx, bossy, 4*boss.width, 4*boss.height);
  tint(113, 100, 255);
  image(player, px, py, 3*player.width, 3*player.height);
}

void keyPressed()
{
  if(key == CODED)
  {
    if(keyCode == UP)
    {
      py -= 5;
    }
    if(keyCode == DOWN)
    {
      py += 5;
    }
    if(keyCode == LEFT)
    {
      px -= 5;
    }
    if(keyCode == RIGHT)
    {
      px += 5;
    }
  }
}
{% endhighlight %}

## Banana fire throwing example

{% highlight java %}
PImage bg;
PImage banana;
PImage fire;
boolean fireActive = false;
int bx = 200;
int by = 200;
float fxDelta;
float fyDelta;
float fxOrig;
float fyOrig;

void setup()
{
  size(800, 537);
  imageMode(CENTER);
  bg = loadImage("meadow.jpg");
  banana = loadImage("dancing-banana.gif");
  fire = loadImage("fire.png");
}

void draw()
{
  background(bg);
  image(banana, bx, by);
  if(fireActive)
  {
    image(fire, fxOrig + fxDelta, fyOrig + fyDelta);
    fyDelta = 0.002*(fxDelta*fxDelta);
    fxDelta += 6;
  }
  if(fxOrig + fxDelta > width || fyOrig + fyDelta > height)
  {
    fireActive = false;
  }
  
  if(keyPressed)
  {
    if(key == ' ' && !fireActive)
    {
      fireActive = true;
      fxOrig = bx+100;
      fyOrig = by-100;
      fxDelta = -100;
      fyDelta = 20;
    }
    if(key == 'w')
    {
      by--;
    }
    if(key == 's')
    {
      by++;
    }
    if(key == 'a')
    {
      bx--;
    }
    if(key == 'd')
    {
      bx++;
    }
  }
}
{% endhighlight %}

{% comment %}
## Sprites

Graphics: [http://opengameart.org/content/platformer-art-deluxe](http://opengameart.org/content/platformer-art-deluxe)

{% highlight java %}

int walkCount = 11;
PImage[] p1walk = new PImage[walkCount];
PImage[] p2walk = new PImage[walkCount];
int p1walkframe = 0;
int p2walkframe = 0;
int p1x = 200;
int p1y = 200;
int p2x = 400;
int p2y = 400;

void setup()
{
  size(displayWidth, displayHeight);
  for(int i = 0; i < walkCount; i++)
  {
    if(i < 9)
    {
      p1walk[i] = loadImage("p1_walk0"+(i+1)+".png");
      p2walk[i] = loadImage("p2_walk0"+(i+1)+".png");
    }
    else
    {
      p1walk[i] = loadImage("p1_walk"+(i+1)+".png");
      p2walk[i] = loadImage("p2_walk"+(i+1)+".png");
    }
  }

  // or, if you have one image and want to extract parts out of it,
  // you can do something like this:
  //
  // PImage master = loadImage("masterimage.png");
  // PImage img1 = master.get(x, y, w, h); // location of a rectangle
  // ...etc.
}

void draw()
{
  background(255);
  if(keyPressed && key == CODED && keyCode == LEFT)
  {
    p1x -= 2;
    p1walkframe = (p1walkframe + 1) % walkCount; 
  }
  if(keyPressed && key == CODED && keyCode == RIGHT)
  {
    p1x += 2;
    p1walkframe = (p1walkframe + 1) % walkCount; 
  }
  if(keyPressed && key == 'a')
  {
    p2x -= 2;
    p2walkframe = (p2walkframe + 1) % walkCount; 
  }
  if(keyPressed && key == 'd')
  {
    p2x += 2;
    p2walkframe = (p2walkframe + 1) % walkCount; 
  }
  
  image(p1walk[p1walkframe], p1x, p1y);
  image(p2walk[p2walkframe], p2x, p2y);
}
{% endhighlight %}

## Tiles

Graphics: [http://opengameart.org/content/platformer-art-deluxe](http://opengameart.org/content/platformer-art-deluxe)

{% highlight java %}
PImage[][] tiles = new PImage[8][8];

void setup()
{
  size(8*70, 8*70);
  for(int i = 0; i < 8; i++)
  {
    tiles[i][7] = loadImage("stoneMid.png");
  }
  tiles[1][3] = loadImage("sandCliffLeft.png");
  tiles[2][3] = loadImage("sandMid.png");
  tiles[3][3] = loadImage("sandCliffRight.png");
  
}

void draw()
{
  background(#71FFFE);
  for(int i = 0; i < 8; i++)
  {
    for(int j = 0; j < 8; j++)
    {
      if(tiles[i][j] != null)
      {
        image(tiles[i][j], i*70, j*70);
      }
    }
  }
}
{% endhighlight %}

{% endcomment %}
